@import '../variables';
@import './mixins';
@import './visibility-mixins';

$sm-start: ($xs-max + 1);
$md-start: ($sm-max + 1);
$lg-start: ($md-max + 1);
$xl-start: ($lg-max + 1);

$breakpoint-xs-only: 'only screen and (max-width: #{$xs-max})';
$breakpoint-sm-up: 'only screen and (min-width: #{$sm-start})';
$breakpoint-sm-only: 'only screen and (min-width: #{$sm-start}) and (max-width: #{$sm-max})';
$breakpoint-md-up: 'only screen and (min-width: #{$md-start})';
$breakpoint-md-only: 'only screen and (min-width: #{$md-start}) and (max-width: #{$md-max})';
$breakpoint-lg-up: 'only screen and (min-width: #{$lg-start})';
$breakpoint-lg-only: 'only screen and (min-width: #{$lg-start}) and (max-width: #{$lg-max})';
$breakpoint-xl-up: 'only screen and (min-width: #{$xl-start})';

$breakpoints-all: (
  $breakpoint-xs-only,
  $breakpoint-sm-up,
  $breakpoint-sm-only,
  $breakpoint-md-up,
  $breakpoint-md-only,
  $breakpoint-lg-up,
  $breakpoint-lg-only,
  $breakpoint-xl-up
);
$breakpoint-ups: (
  $breakpoint-sm-up,
  $breakpoint-md-up,
  $breakpoint-lg-up,
  $breakpoint-xl-up
);
$breakpoint-all-prefixes: (
  'xs',
  'xs-only',
  'sm',
  'sm-only',
  'md',
  'md-only',
  'lg',
  'lg-only',
  'xl'
);
$breakpoint-up-prefixes: ('xs', 'sm', 'md', 'lg', 'xl');

.row {
  @include row();

  margin: 0 auto;
}

.row.no-wrap {
  flex-wrap: nowrap;
}

.row.reverse {
  @include row-reverse();
}

.row.natural-height {
  @include row-natural-height();
}

.row.flex-column {
  @include row-flex-column();
}

.col {
  @include col();
}

.col.reverse {
  @include col-reverse();
}

.first {
  order: -1;
}

.last {
  order: 1;
}

.align-start {
  align-self: flex-start;
}

.align-end {
  align-self: flex-end;
}

.align-center {
  align-self: center;
}

.align-baseline {
  align-self: baseline;
}

.align-stretch {
  align-self: stretch;
}
.col-text-center {
  text-align: center;
}
.col-text-right {
  text-align: right;
}
.col-text-left {
  text-align: left;
}
// Mixin to run inside of for loop - creates col/breakpoint classes * Not for developer use *

@mixin col-factory($thisPrefix) {
  @for $i from 1 through $grid-columns {
    .col-#{$thisPrefix}-#{$i} {
      box-sizing: border-box;
      flex-basis: 100% / $grid-columns * $i;
      max-width: 100% / $grid-columns * $i;
      padding: $gutter;
    }

    .col-#{$thisPrefix}-offset-#{$i} {
      margin-left: 100% / $grid-columns * $i;
    }
  }

  .col-#{$thisPrefix} {
    box-sizing: border-box;
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
    padding: $gutter;
  }

  .row.start-#{$thisPrefix} {
    justify-content: flex-start;
  }

  .row.center-#{$thisPrefix} {
    justify-content: center;
  }

  .row.end-#{$thisPrefix} {
    justify-content: flex-end;
  }

  .row.top-#{$thisPrefix} {
    align-items: flex-start;
  }

  .row.middle-#{$thisPrefix} {
    align-items: center;
  }

  .row.bottom-#{$thisPrefix} {
    align-items: flex-end;
  }

  .row.around-#{$thisPrefix} {
    justify-content: space-around;
  }

  .row.between-#{$thisPrefix} {
    justify-content: space-between;
  }

  .first-#{$thisPrefix} {
    order: -1;
  }

  .last-#{$thisPrefix} {
    order: 1;
  }
} // Mixin to run inside of for loop - creates col/breakpoint classes

@for $i from 1 through length($breakpoint-up-prefixes) {
  $thisPrefix: nth($breakpoint-up-prefixes, $i);

  @if $thisPrefix == 'xs' {
    @include col-factory($thisPrefix);
  } @else if $thisPrefix == 'sm' {
    @media #{$breakpoint-sm-up} {
      @include col-factory($thisPrefix);
    }
  } @else if $thisPrefix == 'md' {
    @media #{$breakpoint-md-up} {
      @include col-factory($thisPrefix);
    }
  } @else if $thisPrefix == 'lg' {
    @media #{$breakpoint-lg-up} {
      @include col-factory($thisPrefix);
    }
  } @else if $thisPrefix == 'xl' {
    @media #{$breakpoint-xl-up} {
      @include col-factory($thisPrefix);
    }
  }
}

.col-gutter-lr {
  padding: 0 $gutter;
}

.col-gutter-tb {
  padding: $gutter 0;
}

.col-no-gutter {
  padding: 0;
}
